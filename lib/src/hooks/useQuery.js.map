{"version":3,"file":"useQuery.js","sourceRoot":"","sources":["../../../src/hooks/useQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\n\n\n\ninterface Error {\n    message: string,\n    code: string,\n}\n\ninterface ApiResult<T> {\n    data: T,\n    error?: Error,\n    redirect?: string,\n}\n\nconst api = async <I, T>(url: string, input?: I, extra?: (data: ApiResult<T>) => void) => {\n    // console.log('fetch', url)\n\n    return fetch(url, {\n        body: JSON.stringify(input),\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n    })\n        .then(a => a.json())\n        .then(result => {\n            if (extra) extra(result)\n            if ('data' in result)\n                return result.data as T\n        })\n}\n\n\n\nconst useQuery = <I, T>(url: string, input?: I): [T | undefined, React.Dispatch<React.SetStateAction<T | undefined>>, { loading: boolean, refetch: () => void, error?: Error, redirect?: string }] => {\n    const [data, setData] = useState<T | undefined>()\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState<Error | undefined>()\n    const [redirect, setRedirect] = useState<string | undefined>(undefined)\n\n    const refetch = () => {\n\n        api<I, T>(url, input, (result: ApiResult<T>) => {\n                if (result?.redirect)\n                    setRedirect(result.redirect)\n\n                if (result?.error)\n                    setError(result.error)\n\n            })\n            .then(result => {\n                setData(result)\n            })\n            .catch(e => {\n                setError({\n                    message: e.message,\n                    code: e.code,\n                })\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }\n\n    useEffect(refetch, [])\n\n    return [data, setData, { loading, error, refetch, redirect }]\n}\n\n\n\nconst useQuerySync = <I, T>(url: string): [(input?: I) => Promise<T | undefined>, { loading: boolean, error?: Error, redirect?: string }] => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState<Error | undefined>()\n    const [redirect, setRedirect] = useState<string | undefined>(undefined)\n\n\n\n\n    const refetch = async (input?: I): Promise<T | undefined> => {\n        setLoading(true)\n\n        const data = await api<I, T>(url, input, (result: ApiResult<T>) => {\n            if (result?.redirect)\n                setRedirect(result.redirect)\n\n            if (result?.error)\n                setError(result.error)\n\n        }).catch(error => {\n            setError(error)\n        })\n\n        setLoading(false)\n        if (data)\n            return data\n    }\n\n    return [refetch, { loading, error, redirect }]\n}\n\n\n\nexport {\n    useQuery,\n    useQuerySync\n}"]}